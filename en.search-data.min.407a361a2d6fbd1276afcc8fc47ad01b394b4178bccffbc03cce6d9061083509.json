[{"id":0,"href":"/docs/server/","title":"Server","section":"Docs","content":" Mooshak Server # Setup # To setup a mooshak server you will need git, docker and docker compose installed.\nGo to directory of your choice and clone the project.\n$ git clone https://github.com/sepgh/mooshak Next, go to newly cloned mooshak directory and then navigate to server directory. After that you can start mooshak by runing the docker compose:\n$ cd mooshak # cloned directory $ cd server # server scripts $ docker compose up -d # or: docker-compose up -d Congradulations! You have mooshak ready to be used. The SSH server will be available on port 2255, and websocket tunnel will be available on port 3344.\nTo stop the mooshak server go to the same directory and then use:\n$ docker compose down Managing users # The mooshak container has scripts installed to help you add or remove users.\nFirst you need to find the running container:\n$ docker ps Example output:\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a8b04854bb35 mooshak10-wstunnel \u0026#34;/bin/sh -c \u0026#39;/wstunnâ€¦\u0026#34; 4 seconds ago Up 2 seconds 0.0.0.0:3344-\u0026gt;80/tcp, :::3344-\u0026gt;80/tcp mooshak10-wstunnel-1 f1ac70f5d9bb mooshak10-mooshak \u0026#34;/entrypoint.sh\u0026#34; 4 seconds ago Up 2 seconds 0.0.0.0:2255-\u0026gt;22/tcp, :::2255-\u0026gt;22/tcp mooshak10-mooshak-1 # \u0026lt;-- The container ID we are looking for is f1ac70f5d9bb in this example, with image mooshak{tag}-mooshak.\nTo add a new user (or update their password) use:\n$ docker exec \u0026lt;COONTAINER ID HERE\u0026gt; /adduser.sh \u0026lt;username\u0026gt; \u0026lt;password\u0026gt; # Eaxmple valid output: chpasswd: password for \u0026#39;test\u0026#39; changed To remove a user (and terminate their open session) use:\n$ docker exec \u0026lt;COONTAINER ID HERE\u0026gt; /deleteuser.sh \u0026lt;username\u0026gt; # Example valid output: deluser: can\u0026#39;t find test in /etc/group Run behind Nginx - Websocket # You can configure your Nginx setup to forward websocket connections to websocket port listened by Mooshak WsTunnel (3344).\nHere is a sample path configuration to add to your Nginx setup:\nlocation /mooshak { proxy_pass http://127.0.0.1:3344; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_connect_timeout 10m; proxy_send_timeout 10m; proxy_read_timeout 90m; send_timeout 10m; } Reload your Nginx service and you are good to go.\n"},{"id":1,"href":"/docs/clients/windows/","title":"Windows Client","section":"Docs","content":" Mooshak Windows Client # This page describess how to run Mooshak Windows Client.\nThis client is written in python for easier development in future. There is no pre-built executable ready at this moment. If you don\u0026rsquo;t want to install python you can try poormans vpn batch script.\nRequirements # To use Mooshak windows client, you will need to install python interpreter installed on your system(tested on 3.8, but 3.6+ is enough).\nInstallation # First, clone the repository or download it as a zip and move it into directory of your choice. We assume this directory is called mooshak.\nOpen CMD and navigate to mooshak\\clients\\windows directory. Start a new python virtual environment: python -m venv venv Activate the newly created virtual environment: venv\\Scripts\\activate Install requirements: pip install -r requirements.txt Configuration # Navigate to mooshak\\clients\\windows and create a new file named client.json.\nEdit this file and replace the sample below with the values of your choice:\n{ \u0026#34;socks_port\u0026#34;: 8000, \u0026#34;server\u0026#34;: \u0026#34;14.15.16.17\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;port\u0026#34;: 2255 } The socks_port will be used on local machine to listen for incoming socks connections. server is ip address or hostname of the remote proxy server. username and password are SSH credentials. port is remote server port.\nTo use Websocket tunneling try below example:\n{ \u0026#34;socks_port\u0026#34;: 8000, \u0026#34;ws\u0026#34;: true, \u0026#34;ws_server\u0026#34;: \u0026#34;wss://your_host\u0026#34;, \u0026#34;ws_path_prefix\u0026#34;: \u0026#34;mooshak\u0026#34;, \u0026#34;ws_listen_port\u0026#34;: 6000, \u0026#34;username\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;test\u0026#34; } The value of ws_path_prefix should be the same one as in Nginx path configuration on server side, however this field is not mandatory.\nRunning client # First run a new Command Promot as administrator.\nNavigate to mooshak\\clients\\windows from CMD and activate the virtual environment using venv\\Scripts\\activate.\nThen execute: python mooshak.py to get CLI access for Mooshak client. You can type in start to start the client, stop to stop it, and help to see all available commands.\nYou will need to keep the application open since there are no daemon services running as mooshak client on your system. Closing the started application without first executing stop command will result in your system forwarding connections to unexisting DNS and Tunnel! Make sure to first execute stop command before leaving and if you forgot, run the application again and then execute stop command to fix. "}]