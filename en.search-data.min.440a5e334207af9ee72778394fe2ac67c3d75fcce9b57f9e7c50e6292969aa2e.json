[{"id":0,"href":"/docs/clients/linux/","title":"Linux Client","section":"Docs","content":" Mooshak Linux Client # Mooshak Linux Client uses sshuttle internally and it just handles what arguments are passed to sshuttle if ran with or without websocket tunnel.\nRequirements # To use Mooshak linux client, you will need to install python interpreter installed on your system(tested on 3.8, but 3.6+ is enough).\nInstallation # First, clone the repository or download it as a zip and move it into directory of your choice. We assume this directory is called mooshak.\nOpen terminal and navigate to mooshak/clients/linux directory. Start a new python virtual environment: python -m venv venv Activate the newly created virtual environment: venv/bin/activate Install requirements: pip install -r requirements.txt Configuration # Navigate to mooshak/clients/linux and create a new file named client.json.\nEdit this file and replace the sample below with the values of your choice:\n{ \u0026#34;server\u0026#34;: \u0026#34;14.15.16.17\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;port\u0026#34;: 2255, } server is ip address or hostname of the remote ssh server. username is for ssh user and you will be prompted for the password. port is remote server port.\nTo use Websocket tunneling try below example:\n{ \u0026#34;ws\u0026#34;: true, \u0026#34;ws_server\u0026#34;: \u0026#34;wss://your_host\u0026#34;, \u0026#34;ws_path_prefix\u0026#34;: \u0026#34;mooshak\u0026#34;, \u0026#34;ws_listen_port\u0026#34;: 6000, \u0026#34;username\u0026#34;: \u0026#34;test\u0026#34;, } The value of ws_path_prefix should be the same one as in Nginx path configuration on server side, however this field is not mandatory.\nRunning client # Navigate to mooshak/clients/linux from terminal and activate the virtual environment using venv/bin/activate.\nThen execute python mooshak.py connect to connect to the client and use Control + C to disconnect and exit.\nYou will need to keep the application open since there are no daemon services running as mooshak client on your system. "},{"id":1,"href":"/docs/server/","title":"Server","section":"Docs","content":" Mooshak Server # Setup # To setup a mooshak server you will need git, docker and docker compose (comes with docker itself in latest versions) installed.\nGo to directory of your choice and clone the project.\ngit clone https://github.com/sepgh/mooshak Next, go to newly cloned mooshak directory and then navigate to server directory.\ncd mooshak # cloned directory cd server # server scripts After that, create required docker volume and networks, then you can start mooshak by runing the docker compose:\n# Network and volume: docker volume create mooshak_sshd docker network create mooshak # Running: docker compose up -d # or: docker-compose up -d Congradulations! You have mooshak ready to be used. The SSH server will be available on port 2255, and websocket tunnel will be available on port 3344.\nTo stop the mooshak server go to the same directory and then use:\ndocker compose down Managing users # The mooshak container has scripts installed to help you add or remove users.\nFirst you need to find the running container:\ndocker ps Example output:\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ac057f82ebd8 mooshak10-wstunnel \u0026#34;/bin/sh -c \u0026#39;/wstunnâ€¦\u0026#34; 3 seconds ago Up 2 seconds 0.0.0.0:3344-\u0026gt;80/tcp, :::3344-\u0026gt;80/tcp mooshak10-wstunnel-1 64f256e4f023 mooshak \u0026#34;/entrypoint.sh\u0026#34; 3 seconds ago Up 3 seconds 0.0.0.0:2255-\u0026gt;22/tcp, :::2255-\u0026gt;22/tcp mooshak_sshd The container ID we are looking for is 64f256e4f023 in this example, with image name mooshak_sshd.\nTo add a new user (or update their password) use:\n$ docker exec \u0026lt;COONTAINER ID HERE\u0026gt; /adduser.sh \u0026lt;username\u0026gt; \u0026lt;password\u0026gt; # Eaxmple valid output: chpasswd: password for \u0026#39;test\u0026#39; changed To remove a user (and terminate their open session) use:\n$ docker exec \u0026lt;COONTAINER ID HERE\u0026gt; /deleteuser.sh \u0026lt;username\u0026gt; # Example valid output: deluser: can\u0026#39;t find test in /etc/group Run behind Nginx - Websocket # You can configure your Nginx setup to forward websocket connections to websocket port listened by Mooshak WsTunnel (3344).\nHere is a sample path configuration to add to your Nginx setup:\nlocation /mooshak { proxy_pass http://127.0.0.1:3344; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_connect_timeout 10m; proxy_send_timeout 10m; proxy_read_timeout 90m; send_timeout 10m; } Reload your Nginx service and you are good to go.\n"},{"id":2,"href":"/docs/clients/windows/","title":"Windows Client","section":"Docs","content":" Mooshak Windows Client # This page describess how to run Mooshak Windows Client.\nThis client is written in python for easier development in future. If you don\u0026rsquo;t want to install python you can try pre-built version from releases or poormans vpn batch script.\nUpdate: tunnel all of your windows machine traffic using virtual machine # The Linux Client of mooshak depends on SSHuttle directly. The article below explains how to use Oracle Virtual Box to run SSHuttle inside linux VM in a windows host and proxy all your traffic through it. This is better solution than the default mooshak client for windows.\nhttps://sepgh.medium.com/using-sshuttle-on-windows-3bca5496b7c1\nHow it works: # Mooshak Windows Client uses Putty Plink software to create a SSH Tunnel to the server. Additionally, Websocket Tunnel may be used on top of SSH Tunnel. Afterwards, the DNS2SOCKS will be used to redirect DNS traffic through SSH Tunnel, and windows proxy and DNS configuration will be changed. Mooshak itself hasn\u0026rsquo;t implemented any of these tools and they are third party solutions that are gathered together in the client.\nRequirements (from source) # To use Mooshak windows client from source, you will need to install python interpreter installed on your system(tested on 3.8, but 3.6+ is enough).\nInstallation (from source) # First, clone the repository or download it as a zip and move it into directory of your choice. We assume this directory is called mooshak.\nOpen CMD and navigate to mooshak\\clients\\windows directory. Start a new python virtual environment: python -m venv venv Activate the newly created virtual environment: venv\\Scripts\\activate Install requirements: pip install -r requirements.txt Configuration # Navigate to mooshak\\clients\\windows and create a new file named client.json.\nEdit this file and replace the sample below with the values of your choice:\n{ \u0026#34;socks_port\u0026#34;: 8000, \u0026#34;server\u0026#34;: \u0026#34;14.15.16.17\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;port\u0026#34;: 2255, \u0026#34;host_key\u0026#34;: \u0026#34;SHA256:aSB62hUG4e0IuMffB/bxiaA+hxQMK5asdalaZk/EQ+A\u0026#34;, \u0026#34;verbose\u0026#34;: false } The socks_port will be used on local machine to listen for incoming socks connections. server is ip address or hostname of the remote proxy server. username and password are SSH credentials. port is remote server port.\nTo debug the connection you can set verbose to true to get log of Plink and WsTunnel.\nTo use Websocket tunneling try below example:\n{ \u0026#34;socks_port\u0026#34;: 8000, \u0026#34;ws\u0026#34;: true, \u0026#34;ws_server\u0026#34;: \u0026#34;wss://your_host\u0026#34;, \u0026#34;ws_path_prefix\u0026#34;: \u0026#34;mooshak\u0026#34;, \u0026#34;ws_listen_port\u0026#34;: 6000, \u0026#34;username\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;host_key\u0026#34;: \u0026#34;SHA256:aSB62hUG4e0IuMffB/bxiaA+hxQMK5asdalaZk/EQ+A\u0026#34; } The value of ws_path_prefix should be the same one as in Nginx path configuration on server side, however this field is not mandatory.\nIf you are using pre-built version then keep this configuration file right next to the executable file. Running client # From source # First run a new Command Promot as administrator.\nNavigate to mooshak\\clients\\windows from CMD and activate the virtual environment using venv\\Scripts\\activate.\nThen execute: python mooshak.py connect to connect and disconnect with Control + C. If you close the window withoug Control + C it wont disconnect completely and you will need to do mooshak.exe disconnect.\nFrom pre-built # First run a new Command Promot as administrator and navigate to where your executable file is.\nThen execute mooshak.exe connect to connect and disconnect with Control + C. If you close the window withoug Control + C it wont disconnect completely and you will need to do mooshak.exe disconnect.\nImportant: If you are running pre-built you will need to either create a folder called assets next to your executable file and then download all of the assets from this link there, or you can run mooshak.exe load_assets so it will download external dependencies for you automatically.\nYou will need to keep the application open since there are no daemon services running as mooshak client on your system. (for both pre-built and python) "}]